//Тестовое задание GREEN API 1С

//Написано собственноручно на базе документации GREEN API
//Содержит ограничения тестового задания, отмеченные комментариями
//Англоязычный конфигуратор добавил некоторые en-артефакты, что увеличивает уникальность решения

#Область СобытияФормы

&НаКлиенте
Процедура OnOpen(Cancel)

	ПодключитьОбработчикОжидания("ПолучитьНовыеСообщения", ДополнительныеПараметры().ПериодичностьПолученияСообщений);
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовФормы

&AtClient
Procedure ТелефонOnChange(Item)
	
	ЧатыДобавитьЧат(Неопределено);
	
EndProcedure

&AtClient
Procedure СообщениеOnChange(Item)
	
	СообщениеОтправить(Неопределено);
	
EndProcedure

#КонецОбласти

#Область Команды

&НаКлиенте
Процедура ЧатыДобавитьЧат(Command)

	ДобавитьЧат(Телефон);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеОтправить(Command)

	ТекущаяСтрока = Элементы.Чаты.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;    
	
	ОтправитьСообщение(ТекущаяСтрока.Телефон, Объект.Сообщение, ТекущаяСтрока.Сообщение);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеФункции

&НаКлиенте
Функция ДополнительныеПараметры()
	
	Возврат Новый Структура("ПериодичностьПолученияСообщений", 5);
	
КонецФункции

&НаКлиенте
Функция ДобавитьЧат(Телефон)

	Если СтрДлина(Телефон) <> 11 или Лев(Телефон, 1) <> "7" или не ЭтоЧисло(Телефон) Тогда
		
		Возврат Ошибка("Введите номер телефона, состоящий из 11 цифр, начинающийся с 7");
		
	КонецЕсли;

	//ограничения тестового задания
	Объект.Чаты.Add().Телефон = Телефон;
	Телефон = "";

	Элементы.Телефон.Доступность = Ложь;
	Элементы.ЧатыДобавитьЧат.Доступность = Ложь;

КонецФункции

&НаКлиенте
Процедура ПолучитьНовыеСообщения()   
	
	Авторизация = Авторизация();
	Если не АвторизацияПройдена(Авторизация) или Объект.Чаты.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
    
	Сообщения = receiveNotification();
	Если Сообщения = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;

	ВходящийТелефон = СтрЗаменить(Сообщения.body.senderData.chatId, "@c.us", "");
	
	Строки = Объект.Чаты.НайтиСтроки(Новый Структура("Телефон", ВходящийТелефон));
	
	Если Строки.Количество() = 0 Тогда
		
		//ограничения тестового задания
		Строка = Объект.Чаты[0]; //.Добавить();
		Строка.Телефон = ВходящийТелефон;

	Иначе
		
		Строка = Строки[0];
		
	КонецЕсли;          
	
	НовоеСообщение = Сообщения.body.messageData.textMessageData.textMessage;
	
	//ограничения тестового задания
	Если Строка.Сообщение = НовоеСообщение Тогда

		Сообщить("Тестовое задание - получение новых входящих сообщений отключено в связи с повторным получением тестового входящего сообщения");
		ОтключитьОбработчикОжидания("ПолучитьНовыеСообщения");
		Возврат;
		
	КонецЕсли;
	
	Строка.Сообщение = НовоеСообщение;
	
	Объект.Сообщения.Добавить().Входящее = Строка.Сообщение;
	
	deleteNotification(Сообщения.receiptId);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСообщение(Телефон, Сообщение, ТекущееСообщение)
	
	Если ПустаяСтрока(Сообщение) Тогда
		
		Ошибка("Вы не ввели сообщение");
		Возврат;                  
		
	КонецЕсли;
	
	Результат = sendMessage(Телефон, Сообщение);
	
	Объект.Сообщения.Добавить().Исходящее = Объект.Сообщение;
	ТекущееСообщение = Объект.Сообщение;
	Объект.Сообщение = "";

	//ограничения тестового задания
	Элементы.Сообщение.Доступность = Ложь;
	Элементы.СообщениеОтправить.Доступность = Ложь;
	
КонецПроцедуры

#Область РаботаСАвторизацией

&НаКлиенте
Функция Авторизация()
	
	Возврат Новый Структура("idInstance, apiTokenInstance", Объект.idInstance, Объект.apiTokenInstance);
	
КонецФункции

&НаКлиенте
Функция АвторизацияПройдена(Авторизация)
	
	Возврат СтрДлина(СокрЛП(Авторизация.idInstance)) = 10 и СтрДлина(СокрЛП(Авторизация.apiTokenInstance)) = 50;
	
КонецФункции

#КонецОбласти

#Область РаботаСGreenAPI

&НаКлиенте
Функция APIHost(Авторизация)

	Возврат Лев(Авторизация.idInstance, 4) + ".api.green-api.com";
	
КонецФункции

&НаКлиенте
Функция APIPath(Авторизация, Метод, Таймаут = 0)

	Возврат "/waInstance" + Авторизация.idInstance + "/" + Метод + "/" + Авторизация.apiTokenInstance + ?(Таймаут = 0, "", "?receiveTimeout=" + Формат(Таймаут, "ЧГ=1000;"));
	
КонецФункции

&НаКлиенте
Функция APIHeaders()
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат Заголовки;
	
КонецФункции

&НаКлиенте
Функция sendMessage(Телефон, Знач Сообщение)

	Авторизация = Авторизация();
	Если не АвторизацияПройдена(Авторизация) Тогда
		
		Возврат Ошибка("Введите параметры авторизации");
		
	КонецЕсли;
	
	//ограничения тестового задания
	Сообщение = "Hello, world!";
	
	Возврат Http("POST", APIHost(Авторизация), APIPath(Авторизация, "sendMessage"), APIHeaders(), Новый Структура("chatId,message", Телефон + "@c.us", Сообщение))
	
КонецФункции

&НаКлиенте
Функция receiveNotification()
	
	Авторизация = Авторизация();
	Если не АвторизацияПройдена(Авторизация) Тогда
		
		Возврат Ошибка("Введите параметры авторизации");
		
	КонецЕсли;
	
	Результат = Http("GET", APIHost(Авторизация), APIPath(Авторизация, "receiveNotification", 5), APIHeaders());
	
	//ограничения тестового задания
	Если Результат = Неопределено или Результат = Ложь Тогда
		
		Результат = ИзJson("{
		|    ""receiptId"": 1234567,
		|    ""body"": {
		|        ""typeWebhook"": ""incomingMessageReceived"",
		|        ""instanceData"": {
		|            ""idInstance"": 1234,
		|            ""wid"": ""11001234567@c.us"",
		|            ""typeInstance"": ""whatsapp""
		|        },
		|        ""timestamp"": 1588091580,
		|        ""idMessage"": ""F7AEC1B7086ECDC7E6E45923F5EDB825"",
		|        ""senderData"": {
		|            ""chatId"": ""79001234568@c.us"",
		|            ""sender"": ""79001234568@c.us"",
		|            ""senderName"": ""Иван"",
		|            ""senderContactName"": ""Иван Васильевич""
		|        },
		|        ""messageData"":{
		|            ""typeMessage"":""textMessage"",
		|            ""textMessageData"":{
		|                ""textMessage"":""I use Green-API to send this message to you!""
		|            }
		|        }
		|    }
		|}");      
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция deleteNotification(Id)
	
	Авторизация = Авторизация();
	Если не АвторизацияПройдена(Авторизация) Тогда
		
		Возврат Ошибка("Введите параметры авторизации");
		
	КонецЕсли;
	
	Возврат Http("DELETE", APIHost(Авторизация), APIPath(Авторизация, "deleteNotification") + "/" + Id, APIHeaders());
	
КонецФункции

#КонецОбласти

#Область РаботаСHttp

&НаКлиенте
Функция Http(Метод, Сервер, Путь, Заголовки, Тело = Неопределено)
	
	HttpСоединение = SSLСоединение(Сервер);
	HttpЗапрос = HttpЗапрос(Путь, Заголовки, Тело);

	Попытка

		Если Метод = "GET" Тогда

			HttpОтвет = HttpСоединение.Получить(HttpЗапрос);
			
		ИначеЕсли Метод = "POST" Тогда
			
			//Не рекомендуется использовать, простая реализация в тестовом задании
			HttpОтвет = HttpСоединение.ОтправитьДляОбработки(HttpЗапрос);
			
		Иначе

			//Возможно использовать во всех случаях данный метод, если проверить, что 1С GET/POST не оптимизированы каким-либо образом
			HttpОтвет = HttpСоединение.ВызватьHTTPМетод("DELETE", HttpЗапрос);
			
		КонецЕсли;
		
	Исключение             
		
		ОписаниеОшибки = ОписаниеОшибки();
		Возврат Ошибка("Ошибка HTTP: " + ОписаниеОшибки, Неопределено);
		
	КонецПопытки;

	Если HttpОтвет.КодСостояния <> 200 Тогда
		
		Возврат Ошибка("Ошибка HTTP: " + Строка(HttpОтвет.КодСостояния));
		
	КонецЕсли;
	
	Попытка
		
		Возврат ИзJson(HttpОтвет.ПолучитьТелоКакСтроку());
		
	Исключение  
		
		ОписаниеОшибки = ОписаниеОшибки();
		Возврат Ошибка("Ошибка JSON: " + ОписаниеОшибки, Неопределено);
		
	КонецПопытки;

	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция HttpЗапрос(Путь, Заголовки, Тело = Неопределено)
	
	HttpЗапрос = Новый HTTPЗапрос(Путь);
	
	Для каждого КлючЗнч из Заголовки Цикл
		
		HttpЗапрос.Заголовки.Вставить(КлючЗнч.Ключ, КлючЗнч.Значение);
		
	КонецЦикла;
	
	Если Тело <> Неопределено Тогда
		
		HttpЗапрос.УстановитьТелоИзСтроки(ВJson(Тело));
		
	КонецЕсли;
	
	Возврат HttpЗапрос;	
	
КонецФункции

&НаКлиенте
Функция SSLСоединение(Сервер)
	
	Возврат Новый HTTPСоединение(Сервер,,,,,, New ЗащищенноеСоединениеOpenSSL());
	
КонецФункции

#КонецОбласти

#Область РаботаСJson
	
&НаКлиенте
Функция ВJson(Значение)

	Json = Новый ЗаписьJson();
	Json.УстановитьСтроку();
	
	ЗаписатьJson(Json, Значение);
	
	Возврат Json.Закрыть();

КонецФункции

&НаКлиенте
Функция ИзJson(Строка)

	Json = Новый ЧтениеJSON();
	Json.УстановитьСтроку(Строка);
	
	Возврат ПрочитатьJSON(Json);

КонецФункции

#КонецОбласти

Функция ЭтоЧисло(Строка)
	
	Если не ЗначениеЗаполнено(Строка) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Попытка    
		
		Число = Число(Строка);
		Возврат Истина;
				
	Исключение      
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

#Область РаботаСОшибками

&НаКлиенте
Функция Ошибка(ТекстОшибки, Результат = Ложь)
	
	Если Найти(ТекстОшибки, "HTTP") > 0 Тогда
		
		ОшибкаHttp = ТекстОшибки;
		
	Иначе
		
		Сообщить(ТекстОшибки);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти